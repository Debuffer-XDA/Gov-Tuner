#!/system/bin/sh
# Gov-Tuner Battery Profile
# Copyright (C) 2016 - 2017 Debuffer & Senthil360 @ XDA Developers
# 	   With help from Paget96, F4uzan and GreekDragon
#=======================================================================#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
#=======================================================================#

busybox="/system/etc/GovTuner/busybox"
FIRST_RUN="/data/system/first_run"
IPER=$($busybox cat /data/system/IPER)
INTERVAL=/data/system/INTERVAL_SEC
core="/system/etc/GovTuner"
PROFILE_DIR="/data/system/GovTuner/current"
PROFILE="/data/system/GovTuner/current/profile"
CD=2
core_ctl=0

if [ -s "/data/system/test" ]; then
	OUTPUT_ID=$($busybox cat /data/system/test)
	$busybox echo "Resetting GovTuner"
	$busybox echo ""
	$busybox echo "Applying new profile"
	$busybox echo ""
	kill  $OUTPUT_ID 2>/dev/null
fi

if [ ! -f $INTERVAL ]; then
  echo 180 > $INTERVAL
fi

# Devices with core_ctl hotplug have constantly changing clusters which makes it impossible to read from them. So setting core_ctl to 1 will change the
# way how GT works on the device.
for z in $cpu/cpu*; do
		if [ -d $z/cpufreq/core_ctl ]; then
			core_ctl=1
		fi
done

# Alt_detect algorithm by @Senthil360 , veez21 and N1m0Y.
# This is the new Cluster_detection algorithm. Further additions to this set of conditions , must always follow this order
# i) Check whether CD =1 or CD = 0; i.e if cpufreq/$cur_governor exists on /sys/devices/system/cpu or in one of sys/devices/system/cpu/cpu$i directories
# ii) Check for the number "scaling_governor" files in /sys/devices/system/cpu/cpu$i folder, given that those are actual files and not symlinks
# iii) If CD = 0; (/sys/devices/system/cpu/cpufreq/$cur_governor); then check if the max frequencies in those folders are equal (REG=1) or not (DC=1) to confirm
# The  min and Max frequencies, must be initialized , sorted and stored in this function itself. Because sorting values, while the script is actively printing its output at
# the terminal can return false values and also increases the memory footprint by using more registers.
alt_detect() {
    cpu=/sys/devices/system/cpu
	i=0
	while [ -d "/sys/devices/system/cpu/cpu$i" ]; do
		i=$(($i + 1))
		CORE=$i
	done
	c=0
    for z in $cpu/cpu*; do
		if [ -f $z/cpufreq/scaling_governor ] && [ ! -L $z/cpufreq/scaling_governor ] && [ ! -L $z/cpufreq ]; then
            cur_gov[$c]=$(cat $z/cpufreq/scaling_governor)
	    gov[$c]=$z/cpufreq/${cur_gov[$c]}
            gov_r[$c]=$cpu/cpufreq/${cur_gov[$c]}
            change[$c]=$z/cpufreq/scaling_governor
            gov_avail[$c]=$z/cpufreq/scaling_available_governors
	    freq_u[$c]=$z/cpufreq/cpuinfo_max_freq
            freq_l[$c]=$z/cpufreq/cpuinfo_min_freq
			c=$((c+1))
			$busybox sleep 0.5
		fi
    done
    m=0
    while [ "$m" -lt "${#gov[@]}" ]; do
         if [ -d "${gov[$m]}" ]; then
             #Cluster_Device
             if [ "${#gov[@]}" -eq 1 ]; then
                 SC=1
                 ga=0;
                 DEVICE=SINGLE_CLUSTER
                 SC=1; CD=1;
             fi
             if [ "${#gov[@]}" -eq 2 ]; then
                 DC=1
                  sm1=$($busybox cat "${freq_u[0]}" | $busybox cut -d ' ' -f1)
	          sm2=$($busybox cat "${freq_u[1]}" | $busybox cut -d ' ' -f1)
                  gd1=$($busybox cat "${freq_l[0]}" | $busybox cut -d ' ' -f1)
                  gd2=$($busybox cat "${freq_l[1]}" | $busybox cut -d ' ' -f1)
                 if [ "$sm1" -lt "$sm2" ]; then
                    ga=0; gc=1;
                    MAX_FREQ_0="$sm1"
                    MIN_FREQ_0="$gd1"
                    MAX_FREQ_2="$sm2"
                    MIN_FREQ_2="$gd2"
                    DEVICE=DUAL_CLUSTER
                    bL=1; DC=1; CD=1;
                 fi
                 if [ "$sm2" -lt "$sm1" ]; then
                    ga=1; gc=0;
                    MAX_FREQ_0="$sm2"
                    MIN_FREQ_0="$gd2"
                    MAX_FREQ_2="$sm1"
                    MIN_FREQ_2="$gd1"
                    DEVICE=DUAL_CLUSTER_INVERTED
                     bL=1; DC=1; CD=1;
                 fi
              fi
             if [ "${#gov[@]}" -eq 3 ]; then
                 TC=1
                 sm1=$($busybox cat "${freq_u[0]}" | $busybox cut -d ' ' -f1)
	         sm2=$($busybox cat "${freq_u[1]}" | $busybox cut -d ' ' -f1)
                 sm3=$($busybox cat "${freq_u[2]}" | $busybox cut -d ' ' -f1)
                 gd1=$($busybox cat "${freq_l[0]}" | $busybox cut -d ' ' -f1)
                 gd2=$($busybox cat "${freq_l[1]}" | $busybox cut -d ' ' -f1)
                 gd3=$($busybox cat "${freq_l[2]}" | $busybox cut -d ' ' -f1)
                 if [ "$sm1" -lt "$sm2" ] && [ "$sm2" -lt "$sm3" ]; then
                     ga=0; gb=1; gc=2;
                     MAX_FREQ_0="$sm1"
                     MIN_FREQ_0="$gd1"
                     MAX_FREQ_1="$sm2"
                     MIN_FREQ_1="$gd2"
                     MAX_FREQ_2="$sm3"
                     MIN_FREQ_2="$gd3"
                     DEVICE=TRIPLE_CLUSTER
                     bL=1; TC=1; CD=1;
                 fi
                 if [ "$sm2" -lt "$sm3" ] && [ "$sm3" -lt "$sm1" ]; then
                     ga=2; gb=0; gc=1;
                     MAX_FREQ_0="$sm2"
                     MIN_FREQ_0="$gd2"
                     MAX_FREQ_1="$sm3"
                     MIN_FREQ_1="$gd3"
                     MAX_FREQ_2="$sm1"
                     MIN_FREQ_2="$gd1"
                     DEVICE=TRIPLE_CLUSTER_SCRAMBLED
                     bL=1; TC=1; CD=1;
                 fi
                 if [ "$sm3" -lt "$sm1" ] && [ "$sm1" -lt "$sm2" ]; then
                     ga=1; gb=2; gc=0;
                     MAX_FREQ_0="$sm3"
                     MIN_FREQ_0="$gd3"
                     MAX_FREQ_1="$sm1"
                     MIN_FREQ_1="$gd1"
                     MAX_FREQ_2="$sm2"
                     MIN_FREQ_2="$gd2"
                     DEVICE=TRIPLE_CLUSTER_INVERTED
                     bL=1; TC=1; CD=1;
                 fi
             fi
         fi
         if [ -d "${gov_r[0]}" ] || [ -d "${gov_r[1]}" ]; then
            if [ "${#gov[@]}" -eq 2 ]; then
                  sm1=$($busybox cat "${freq_u[0]}" | $busybox cut -d ' ' -f1)
	          sm2=$($busybox cat "${freq_u[1]}" | $busybox cut -d ' ' -f1)
                  gd1=$($busybox cat "${freq_l[0]}" | $busybox cut -d ' ' -f1)
                  gd2=$($busybox cat "${freq_l[1]}" | $busybox cut -d ' ' -f1)
                if [ "$sm1" -lt "$sm2" ]; then
                    ga=0; gc=1;
                    MAX_FREQ_0="$sm1"
                    MIN_FREQ_0="$gd1"
                    MAX_FREQ_1="$sm2"
                    MIN_FREQ_1="$gd2"
                    DEVICE=DUAL_CLUSTER
                    bL=1; DC=1; CD=0;
                fi
                if [ "$sm2" -lt "$sm1" ]; then
                    ga=1; gc=0;
                    MAX_FREQ_0="$sm2"
                    MIN_FREQ_0="$gd2"
                    MAX_FREQ_1="$sm1"
                    MIN_FREQ_1="$gd1"
                    DEVICE=DUAL_CLUSTER_INVERTED
                     bL=1; DC=1; CD=0;
                fi
                if [ "$sm2" -eq "$sm1" ]; then
                   REG=1
                   ga=0; CD=0; DC=0;
                   MAX_FREQ_0=$($busybox cat "$cpu/cpu0/cpufreq/cpuinfo_max_freq" | $busybox cut -d ' ' -f1)
                   MIN_FREQ_0=$($busybox cat "$cpu/cpu0/cpufreq/cpuinfo_min_freq" | $busybox cut -d ' ' -f1)
                   DEVICE=REGULAR
				   unset gov[0];
				   unset gov[1];
				   gov[0]=$cpu/cpufreq/${cur_gov[0]}
                fi
		    fi
			if [ "${#gov[@]}" -ne 2 ]; then
			       REG=1
                   ga=0; CD=0; DC=0;
                   MAX_FREQ_0=$($busybox cat "$cpu/cpu0/cpufreq/cpuinfo_max_freq" | $busybox cut -d ' ' -f1)
                   MIN_FREQ_0=$($busybox cat "$cpu/cpu0/cpufreq/cpuinfo_min_freq" | $busybox cut -d ' ' -f1)
                   DEVICE=REGULAR
				   unset gov[0];
				   unset gov[1];
				   gov[0]=$cpu/cpufreq/${cur_gov[0]}
			fi
         fi
     m=$(($m+1))
    done
}
if [ "$core_ctl" -eq 0 ]; then
 alt_detect
fi

#SET ARRAY
if [ "$bL" -eq 1 ]; then
 if [ "$TC" -eq 1 ] && [ "$TC" -ne 0 ]; then
	#For TRIPLE CLUSTER
	CDF[0]=$(((($MAX_FREQ_0 - $MIN_FREQ_0) / 160000) * 10000))
	CDF[1]=$(((($MAX_FREQ_1 - $MIN_FREQ_1) / 160000) * 10000))
	CDF[2]=$(((($MAX_FREQ_2 - $MIN_FREQ_2) / 160000) * 10000))
 fi
 if [ "$DC" -eq 1 ] && [ "$DC" -ne 0 ]; then
	#For DUAL CLUSTER
	CDF[0]=$(((($MAX_FREQ_0 - $MIN_FREQ_0) / 160000) * 10000))
	CDF[2]=$(((($MAX_FREQ_2 - $MIN_FREQ_2) / 160000) * 10000))
 fi
fi
if [ "$SC" -eq 1 ] && [ "$CD" -eq 1 ]; then
		#For SINGLE CLUSTER
		CDF[0]=$(((($MAX_FREQ_0 - $MIN_FREQ_0) / 160000) * 10000))
fi
if [ "$REG" -eq 1 ] && [ "$CD" -eq 0 ]; then
		#For REGULAR
		CDF[0]=$(((($MAX_FREQ_0 - $MIN_FREQ_0) / 160000) * 10000))
fi

percent_out(){
	# percent_out value total
	val=$1
	total=$2
	echo "$((200*$val/$total % 2 + 100*$val/$total))"
}

#For TUNING_BEGINS
if [ "$core_ctl" -eq 1 ]; then
   ga=0; gc=4;
fi

TUNED="/data/system/tuned"
TWEAKED="/data/system/tweaked"
cecho() {
	#cecho "value" path/file
	file=$2; val=$1
	echo $val > $file 2>/dev/null
	if [ $? -ne 0 ] || [ "$(cat $file)" != "$val" ]; then
		echo "$($busybox basename $file): ${R}error${N}" >> $TUNED
		echo "$($busybox basename $file): ${R}$(cat $file)${N}" >> $TWEAKED
	else
		echo "$($busybox basename $file): ${G}optimized${N}" >> $TUNED
		echo "$($busybox basename $file): ${G}$(cat $file)${N}" >> $TWEAKED
	fi
  if [ "$(cat $INTERVAL)" == "0" ]; then
  echo active > /data/system/test
  fi
	unset file; unset val
}

z=5
while [ 5 == $z ]; do
#IPER_stuff
if [ -e "/data/system/IPER" ]; then
		IPER=$($busybox cat /data/system/IPER);
		if [ $? -ne 0 ]; then
			echo 1 > /data/system/IPER
		fi
	else
		IPER=1
		$busybox echo "1" > "/data/system/IPER";
fi

# IP Values
if [ "$bL" -eq 1 ]; then
 if [ "$TC" -eq 1 ] && [ "$TC" -ne 0 ]; then
	#For TRIPLE CLUSTER
	IP[0]=$(((${CDF[0]} / 10) * $IPER))
	HSF[0]=$((${CDF[0]}  * ($IPER-1)))
	IP[1]=$(((${CDF[1]} / 10) * $IPER))
	HSF[1]=$((${CDF[1]}  * ($IPER-1)))
	IP[2]=$(((${CDF[2]} / 10) * $IPER))
	HSF[2]=$((${CDF[2]}  * ($IPER-1)))
 fi
 if [ "$DC" -eq 1 ] && [ "$DC" -ne 0 ]; then
	#For DUAL CLUSTER
	IP[0]=$(((${CDF[0]} / 10) * $IPER))
	HSF[0]=$((${CDF[0]}  * ($IPER-1)))
	IP[2]=$(((${CDF[2]} / 10) * $IPER))
	HSF[2]=$((${CDF[2]}  * ($IPER-1)))
 fi
fi
if [ "$SC" -eq 1 ] && [ "$CD" -eq 1 ]; then
		#For SINGLE CLUSTER
		IP[0]=$(((${CDF[0]} / 10) * $IPER))
		HSF[0]=$((${CDF[0]}  * ($IPER-1)))
fi
if [ "$REG" -eq 1 ] && [ "$CD" -eq 0 ]; then
		#For REGULAR
		IP[0]=$(((${CDF[0]} / 10) * $IPER))
		HSF[0]=$((${CDF[0]}  * ($IPER-1)))
fi
# Set up_threshold for ondemand
BASE=100
IPT=$(($((IPER*3))-$((IPER/2))))
UPT=$((BASE-IPT))
# sampling_rate
# Rather than calculating, we would rather use preset values to be more accurate across IP values
if [ "$IPER" -eq 1 ]; then
	SMPR=73000
elif [ "$IPER" -eq 2 ]; then
	SMPR=67000
elif [ "$IPER" -eq 3 ]; then
	SMPR=53500
elif [ "$IPER" -eq 4 ]; then
	SMPR=63500;
fi
# down_differential
BASE_DDF=67
IPD=$(($((IPER*2))-$((IPER/2))))
DDF=$((BASE_DDF-IPD))
# down_threshold
PERCENT=66
for i in $($busybox seq 1 $UPT); do
	if [ "$(percent_out $i $UPT)" == "$PERCENT" ]; then
		DTH=$i
		break
	fi
done
if [ -z "$DTH" ]; then
	DTH=$(($((UPT/4))*3))
fi
# End Calculations

	if [ -f $INTERVAL ] && [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -eq 0 ]]; then
		z=1
	fi
	if [ -f "/data/system/tuned" ]; then
		rm -f /data/system/tuned
	fi
	if [ -f "/data/system/tweaked" ]; then
		rm -f /data/system/tweaked
	fi
	if [ -f "/data/system/unsupported" ]; then
		rm -f /data/system/unsupported
	fi

	OUTPUT="/data/system/test"
	$busybox echo $$ > $OUTPUT
	$busybox echo "GovTuner_battery" > $PROFILE

	#Power efficient
	if [ -e "/sys/module/workqueue/parameters/power_efficient" ]; then
		#Tweaks adding
		$busybox echo ">>> TWEAKS ADDING <<<" >> $TUNED
		$busybox echo "" >> $TUNED
		$busybox echo ">>> TWEAKS ADDING <<<" >> $TWEAKED
		$busybox echo "" >> $TWEAKED
		power_efficient=$($busybox cat /sys/module/workqueue/parameters/power_efficient);
		$busybox echo "power_efficient: $power_efficient" >> $TUNED
		$busybox echo "power_efficient: $power_efficient" >> $TWEAKED
		$busybox echo "" >> $TUNED
		$busybox echo "" >> $TWEAKED
	fi

	#TUNING_BEGINS
	#For LITTLE cluster
	if [ "$TC" -eq 1 ] || [ "$DC" -eq 1 ] || [ "$SC" -eq 1 ] || [ "$REG" -eq 1 ] || [ "$core_ctl" -eq 1 ]; then
		$busybox echo ">>> GOVERNOR TUNING <<<" >> $TUNED
		$busybox echo "" >> $TUNED
		$busybox echo ">>> GOVERNOR TWEAKED <<<" >> $TWEAKED
		$busybox echo "" >> $TWEAKED
		if [ -d ${gov[0]} ] || [ -d ${gov_r[0]} ] || [ "$core_ctl" -eq 1 ]; then
			#TL_0 for only hispeed_freq
			TL_0=$((${IP[0]} * 10))
			TL_1=$(($MIN_FREQ_0 + (${IP[0]} * 2)))
			TL_2=$(($TL_1 + ${CDF[0]} + ${IP[0]}))
			TL_3=$(($TL_2 + ${CDF[0]} + (${CDF[0]} / 2)))
			TL_4=$(($TL_3 + ${CDF[0]}))
			TL_5=$(($TL_4 + ${CDF[0]}))
			TL_6=$(($TL_5 + ${CDF[0]} + (${CDF[0]} / 2)))
			TL_7=$(($TL_6 + (${CDF[0]} * 2)))
			TL_8=$(($TL_7 + ${CDF[0]}))
			TL_9=$(($TL_8 + (${CDF[0]} * 3)))
			for i in ${gov[$ga]}; do
				if [ "$bL" -eq 1 ]; then
								$busybox echo -e "\e[01;37m Governor LITTLE core: ${cur_gov[$ga]} \e[00;37m" >> $TUNED
								$busybox echo -e "\e[01;37m Governor LITTLE core: ${cur_gov[$ga]} \e[00;37m" >> $TWEAKED
				fi
				if [ "$SC" -eq 1 ] || [ "$REG" -eq 1 ]; then
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$ga]} \e[00;37m" >> $TUNED
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$ga]} \e[00;37m" >> $TWEAKED
				fi
				chmod 644 $i/*
				if [ -e "$i/above_hispeed_delay" ]; then
					cecho "20000 $TL_2:45000 $TL_4:55000 $TL_6:75000 $TL_7:110000 $TL_8:175000 $TL_9:200000" $i/above_hispeed_delay;
				fi
				if [ -e "$i/boost" ]; then
					cecho "0" $i/boost;
				fi
				if [ -e "$i/boostpulse_duration" ]; then
					cecho "0" $i/boostpulse_duration;
				fi
				if [ -e "$i/go_hispeed_load" ]; then
					if [ "${CDF[0]}" -lt 150000 ] && [ "${CDF[0]}" -gt 110000 ]; then
						cecho "95" $i/go_hispeed_load;
					elif [ "${CDF[0]}" -lt 110000 ] && [ "${CDF[0]}" -gt 0 ]; then
						cecho "90" $i/go_hispeed_load;
					else
						cecho "99" $i/go_hispeed_load;
					fi
				fi
				if [ -e "$i/hispeed_freq" ]; then
						cecho "$((${HSF[0]} + $MIN_FREQ_0))" $i/hispeed_freq;
						$busybox echo "LITTLE $((${HSF[0]} + $MIN_FREQ_0))"
						$busybox sleep 1
				fi
				if [ -e "$i/max_freq_hysteresis" ]; then
					cecho "0" $i/max_freq_hysteresis;
				fi
				if [ -e "$i/align_windows" ]; then
					cecho "0" $i/align_windows;
				fi
				if [ -e "$i/io_is_busy" ]; then
					cecho "1" $i/io_is_busy;
				fi
				if [ -e "$i/min_sample_time" ]; then
					cecho "50000" $i/min_sample_time;
				fi
				if [ -e "$i/sampling_down_factor" ]; then
					cecho "1" $i/sampling_down_factor;
				fi
				if [ -e "$i/target_loads" ]; then
					cecho "0 $MIN_FREQ_0:50 $TL_1:35 $TL_2:45 $TL_3:52 $TL_4:59 $TL_5:75 $TL_6:90 $TL_7:95 $TL_9:99" $i/target_loads;
				fi
				if [ -e "$i/timer_rate" ]; then
					cecho "20000" $i/timer_rate;
				fi
				if [ -e "$i/timer_slack" ]; then
					cecho "0" $i/timer_slack;
				fi
				if [ -e "$i/up_threshold_any_cpu_freq" ]; then
					cecho "0" $i/up_threshold_any_cpu_freq;
				fi
				if [ -e "$i/up_threshold_any_cpu_load" ]; then
					cecho "0" $i/up_threshold_any_cpu_load;
				fi
				if [ -e "$i/down_threshold" ]; then
					cecho "$DTH" $i/down_threshold;
				fi
				if [ -e "$i/freq_step" ]; then
					cecho "7" $i/freq_step;
				fi
				if [ -e "$i/ignore_nice_load" ]; then
					cecho "1" $i/ignore_nice_load;
				fi
				if [ -e "$i/sampling_rate" ] && [[ "${cur_gov[$ga]}" != "conservative" && "${cur_gov[$ga]}" != "lionfish" ]]; then
					cecho "$SMPR" $i/sampling_rate;
				fi
				if [ -e "$i/sampling_rate_min" ] && [[ "${cur_gov[$ga]}" != "conservative" && "${cur_gov[$ga]}" != "ondemand" && "${cur_gov[$ga]}" != "lionfish" ]]; then
					cecho "30000" $i/sampling_rate_min;
				fi
				if [ -e "$i/up_threshold" ]; then
					cecho "$UPT" $i/up_threshold;
				fi
				if [ -e "$i/sync_freq" ]; then
					cecho "$MIN_FREQ_0" $i/sync_freq;
				fi
				if [ -e "$i/two_phase_freq" ]; then
					cecho "960000,960000,960000,960000" $i/two_phase_freq;
				fi
				if [ -e "$i/jump_level" ]; then
					cecho "600000" $i/jump_level;
				fi
				if [ -e "$i/jump_threshold" ]; then
					cecho "99" $i/jump_threshold;
				fi
				if [ -e "$i/powersave_bias" ]; then
					cecho "0" $i/powersave_bias;
				fi
				if [ -e "$i/down_differential" ]; then
					cecho "$DDF" $i/down_differential;
				fi
				if [ -e "$i/second_phase_freq" ]; then
					cecho "$MIN_FREQ_0" $i/second_phase_freq;
				fi
				if [ -e "$i/boostfreq" ]; then
					cecho "0" $i/boostfreq;
				fi
				if [ -e "$i/micro_freq_up_threshold" ]; then
					cecho "99" $i/micro_freq_up_threshold;
				fi
				if [ -e "$i/up_threshold_min_freq" ]; then
					cecho "600000" $i/up_threshold_min_freq;
				fi
				if [ -e "$i/ba_lock" ]; then
					cecho "0" $i/ba_lock;
				fi
				if [ -e "$i/down_differential_multi_core" ]; then
					cecho "35" $i/down_differential_multi_core;
				fi
				if [ -e "$i/freq_down_step" ]; then
					cecho "$MIN_FREQ_0" $i/freq_down_step;
				fi
				if [ -e "$i/freq_down_step_barrier" ]; then
					cecho "$MIN_FREQ_0" $i/freq_down_step_barrier;
				fi
				if [ -e "$i/input_event_min_freq" ]; then
					cecho "$MIN_FREQ_0, $MIN_FREQ_0, $MIN_FREQ_0, $MIN_FREQ_0" $i/input_event_min_freq;
				fi
				if [ -e "$i/optimal_freq" ]; then
					cecho "$MIN_FREQ_0" $i/optimal_freq;
				fi
				if [ -e "$i/shortcut" ]; then
					cecho "0" $i/shortcut;
				fi
				if [ -e "$i/up_threshold_multi_core" ]; then
					cecho "0" $i/up_threshold_multi_core;
				fi
				if [ -e "$i/freq_responsiveness" ]; then
					cecho "$MIN_FREQ_0" $i/freq_responsiveness;
				fi
				if [ -e "$i/awake_ideal_freq" ]; then
					cecho "$MIN_FREQ_0" $i/awake_ideal_freq;
				fi
				if [ -e "$i/boost_duration" ]; then
					cecho "0" $i/boost_duration;
				fi
				if [ -e "$i/boost_freq" ]; then
					cecho "$MIN_FREQ_0" $i/boost_freq;
				fi
				if [ -e "$i/debug_mask" ]; then
					cecho "32" $i/debug_mask;
				fi
				if [ -e "$i/down_rate" ]; then
					cecho "10000" $i/down_rate;
				fi
				if [ -e "$i/ignore_nice" ]; then
					cecho "0" $i/ignore_nice;
				fi
				if [ -e "$i/input_boost_duration" ]; then
					cecho "0" $i/input_boost_duration;
				fi
				if [ -e "$i/max_cpu_load" ]; then
					cecho "100" $i/max_cpu_load;
				fi
				if [ -e "$i/min_cpu_load" ]; then
					cecho "5" $i/min_cpu_load;
				fi
				if [ -e "$i/min_sampling_rate" ]; then
					cecho "20000" $i/min_sampling_rate;
				fi
				if [ -e "$i/ramp_down_step" ]; then
					cecho "150000" $i/ramp_down_step;
				fi
				if [ -e "$i/ramp_up_during_boost" ]; then
					cecho "0" $i/ramp_up_during_boost;
				fi
				if [ -e "$i/ramp_up_step" ]; then
					cecho "100000" $i/ramp_up_step;
				fi
				if [ -e "$i/suspend_ideal_freq" ]; then
					cecho "$MIN_FREQ_0" $i/suspend_ideal_freq;
				fi
				if [ -e "$i/touch_poke_freq" ]; then
					cecho "0" $i/touch_poke_freq;
				fi
				if [ -e "$i/up_rate" ]; then
					cecho "0" $i/up_rate;
				fi
				if [ -e "$i/optimal_max_freq" ]; then
					cecho "0" $i/optimal_max_freq;
				fi
				if [ -e "$i/freq_calc_thresh" ]; then
					cecho "$MIN_FREQ_0" $i/freq_calc_thresh;
				fi
				if [ -e "$i/allowed_misses" ]; then
					cecho "5" $i/allowed_misses;
				fi
				if [ -e "$i/target_residency" ]; then
					cecho "10000" $i/target_residency;
				fi
				if [ -e "$i/inter_hifreq" ]; then
					cecho "1100000" $i/inter_hifreq;
				fi
				if [ -e "$i/inter_lofreq" ]; then
					cecho "$MIN_FREQ_0" $i/inter_lofreq;
				fi
				if [ -e "$i/inter_staycycles" ]; then
					cecho "2" $i/inter_staycycles;
				fi
				if [ -e "$i/staycycles_resetfreq" ]; then
					cecho "$MIN_FREQ_0" $i/staycycles_resetfreq;
				fi
				if [ -e "$i/input_boost_duration" ]; then
					cecho "0" $i/input_boost_duration;
				fi
				if [ -e "$i/sampling_easy_factor" ]; then
					cecho "2" $i/sampling_easy_factor;
				fi
				if [ -e "$i/sampling_interim_factor" ]; then
					cecho "3" $i/sampling_interim_factor;
				fi
				if [ -e "$i/ui_sampling_rate" ]; then
					cecho "40000" $i/ui_sampling_rate;
				fi
				if [ -e "$i/ui_timeout" ]; then
					cecho "40" $i/ui_timeout;
				fi
				if [ -e "$i/down_sample_time" ]; then
					cecho "10000" $i/down_sample_time;
				fi
				if [ -e "$i/up_sample_time" ]; then
					cecho "50000" $i/up_sample_time;
				fi
				if [ -e "$i/active_floor_freq" ]; then
					cecho "$MIN_FREQ_0" $i/active_floor_freq;
				fi
				if [ -e "$i/powersave" ]; then
					cecho "1" $i/powersave;
				fi
				if [ -e "$i/fastlane" ]; then
					cecho "0" $i/fastlane;
				fi
				if [ -e "$i/input_boost_freq" ]; then
					cecho "600000" $i/input_boost_freq;
				fi
				if [ -e "$i/low_load_down_threshold" ]; then
					cecho "37" $i/low_load_down_threshold;
				fi
				if [ "${cur_gov[$ga]}" = "zzmoove" ]; then
					if [ -s $i/profile_number ]; then
						pn=$($busybox cat $i/profile_number)
						if [ "$pn" -ne 0 ]; then
							cecho "0" $i/profile_number;
						fi
					fi
					if [ -e "$i/afs_threshold1" ]; then
						cecho "20" $i/afs_threshold1;
					fi
					if [ -e "$i/afs_threshold2" ]; then
						cecho "30" $i/afs_threshold2;
					fi
					if [ -e "$i/afs_threshold3" ]; then
						cecho "70" $i/afs_threshold3;
					fi
					if [ -e "$i/afs_threshold4" ]; then
						cecho "90" $i/afs_threshold4;
					fi
					if [ -e "$i/auto_adjust_freq_threshold" ]; then
						cecho "0" $i/auto_adjust_freq_threshold;
					fi
					if [ -e "$i/block_down_multiplier_hotplug1" ]; then
						cecho "1" $i/block_down_multiplier_hotplug1;
					fi
					if [ -e "$i/block_down_multiplier_hotplug2" ]; then
						cecho "1" $i/block_down_multiplier_hotplug2;
					fi
					if [ -e "$i/block_down_multiplier_hotplug3" ]; then
						cecho "1" $i/block_down_multiplier_hotplug3;
					fi
					if [ -e "$i/block_down_multiplier_hotplug4" ]; then
						cecho "1" $i/block_down_multiplier_hotplug4;
					fi
					if [ -e "$i/down_threshold" ]; then
						cecho "65" $i/down_threshold;
					fi
					if [ -e "$i/down_threshold_hotplug1" ]; then
						cecho "45" $i/down_threshold_hotplug1;
					fi
					if [ -e "$i/down_threshold_hotplug2" ]; then
						cecho "60" $i/down_threshold_hotplug2;
					fi
					if [ -e "$i/down_threshold_hotplug3" ]; then
						cecho "80" $i/down_threshold_hotplug3;
					fi
					if [ -e "$i/down_threshold_sleep" ]; then
						cecho "95" $i/down_threshold_sleep;
					fi
					if [ -e "$i/early_demand" ]; then
						cecho "0" $i/early_demand;
					fi
					if [ -e "$i/early_demand_sleep" ]; then
						cecho "0" $i/early_demand_sleep;
					fi
					if [ -e "$i/fast_scaling_down" ]; then
						cecho "4" $i/fast_scaling_down;
					fi
					if [ -e "$i/fast_scaling_down_sleep" ]; then
						cecho "6" $i/fast_scaling_down_sleep;
					fi
					if [ -e "$i/fast_scaling_up_sleep" ]; then
						cecho "0" $i/fast_scaling_up_sleep;
					fi
					if [ -e "$i/fast_scaling_up" ]; then
						cecho "0" $i/fast_scaling_up;
					fi
					if [ -e "$i/freq_limit" ]; then
						cecho "0" $i/freq_limit;
					fi
					if [ -e "$i/freq_limit_sleep" ]; then
						cecho "900000" $i/freq_limit_sleep;
					fi
					if [ -e "$i/grad_up_threshold" ]; then
						cecho "50" $i/grad_up_threshold;
					fi
					if [ -e "$i/grad_up_threshold_sleep" ]; then
						cecho "80" $i/grad_up_threshold_sleep;
					fi
					if [ -e "$i/hotplug_block_down_cycles" ]; then
						cecho "0" $i/hotplug_block_down_cycles;
					fi
					if [ -e "$i/hotplug_block_up_cycles" ]; then
						cecho "0" $i/hotplug_block_up_cycles;
					fi
					if [ -e "$i/hotplug_engage_freq" ]; then
						cecho "0" $i/hotplug_engage_freq;
					fi
					if [ -e "$i/hotplug_idle_freq" ]; then
						cecho "0" $i/hotplug_idle_freq;
					fi
					if [ -e "$i/hotplug_idle_threshold" ]; then
						cecho "0" $i/hotplug_idle_threshold;
					fi
					if [ -e "$i/hotplug_lock" ]; then
						cecho "0" $i/hotplug_lock;
					fi
					if [ -e "$i/hotplug_max_limit" ]; then
						cecho "0" $i/hotplug_max_limit;
					fi
					if [ -e "$i/hotplug_min_limit" ]; then
						cecho "0" $i/hotplug_min_limit;
					fi
					if [ -e "$i/hotplug_sleep" ]; then
						cecho "0" $i/hotplug_sleep;
					fi
					if [ -e "$i/hotplug_stagger_down" ]; then
						cecho "0" $i/hotplug_stagger_down;
					fi
					if [ -e "$i/hotplug_stagger_up" ]; then
						cecho "0" $i/hotplug_stagger_up;
					fi
					if [ -e "$i/ignore_nice_load" ]; then
						cecho "0" $i/ignore_nice_load;
					fi
					if [ -e "$i/inputboost_cycles" ]; then
						cecho "0" $i/inputboost_cycles;
					fi
					if [ -e "$i/inputboost_punch_cycles" ]; then
						cecho "0" $i/inputboost_punch_cycles;
					fi
					if [ -e "$i/inputboost_punch_freq" ]; then
						cecho "0" $i/inputboost_punch_freq;
					fi
					if [ -e "$i/inputboost_punch_on_epenmove" ]; then
						cecho "0" $i/inputboost_punch_on_epenmove;
					fi
					if [ -e "$i/inputboost_punch_on_fingerdown" ]; then
						cecho "0" $i/inputboost_punch_on_fingerdown;
					fi
					if [ -e "$i/inputboost_punch_on_fingermove" ]; then
						cecho "0" $i/inputboost_punch_on_fingermove;
					fi
					if [ -e "$i/inputboost_typingbooster_cores" ]; then
						cecho "0" $i/inputboost_typingbooster_cores;
					fi
					if [ -e "$i/inputboost_typingbooster_up_threshold" ]; then
						cecho "60" $i/inputboost_typingbooster_up_threshold;
					fi
					if [ -e "$i/inputboost_up_threshold" ]; then
						cecho "100" $i/inputboost_up_threshold;
					fi
					if [ -e "$i/music_max_freq" ]; then
						cecho "600000" $i/music_max_freq;
					fi
					if [ -e "$i/music_min_cores" ]; then
						cecho "0" $i/music_min_cores;
					fi
					if [ -e "$i/music_min_freq" ]; then
						cecho "$MIN_FREQ_0" $i/music_min_freq;
					fi
					if [ -e "$i/sampling_down_factor" ]; then
						cecho "1" $i/sampling_down_factor;
					fi
					if [ -e "$i/sampling_down_max_momentum" ]; then
						cecho "0" $i/sampling_down_max_momentum;
					fi
					if [ -e "$i/sampling_down_max_sensitivity" ]; then
						cecho "75" $i/sampling_down_max_sensitivity;
					fi
					if [ -e "$i/sampling_rate" ]; then
						cecho "100000" $i/sampling_rate;
					fi
					if [ -e "$i/sampling_rate_idle" ]; then
						cecho "100000" $i/sampling_rate_idle;
					fi
					if [ -e "$i/sampling_rate_idle_delay" ]; then
						cecho "0" $i/sampling_rate_idle_delay;
					fi
					if [ -e "$i/sampling_rate_idle_threshold" ]; then
						cecho "50" $i/sampling_rate_idle_threshold;
					fi
					if [ -e "$i/sampling_rate_sleep_multiplier" ]; then
						cecho "2" $i/sampling_rate_sleep_multiplier;
					fi
					if [ -e "$i/scaling_block_cycles" ]; then
						cecho "0" $i/scaling_block_cycles;
					fi
					if [ -e "$i/scaling_block_force_down" ]; then
						cecho "0" $i/scaling_block_force_down;
					fi
					if [ -e "$i/scaling_block_freq" ]; then
						cecho "0" $i/scaling_block_freq;
					fi
					if [ -e "$i/scaling_block_threshold" ]; then
						cecho "0" $i/scaling_block_threshold;
					fi
					if [ -e "$i/scaling_fastdown_down_threshold" ]; then
						cecho "0" $i/scaling_fastdown_down_threshold;
					fi
					if [ -e "$i/scaling_fastdown_freq" ]; then
						cecho "0" $i/scaling_fastdown_freq;
					fi
					if [ -e "$i/scaling_fastdown_up_threshold" ]; then
						cecho "0" $i/scaling_fastdown_up_threshold;
					fi
					if [ -e "$i/scaling_proportional" ]; then
						cecho "0" $i/scaling_proportional;
					fi
					if [ -e "$i/scaling_responsiveness_freq" ]; then
						cecho "0" $i/scaling_responsiveness_freq;
					fi
					if [ -e "$i/scaling_responsiveness_up_threshold" ]; then
						cecho "90" $i/scaling_responsiveness_up_threshold;
					fi
					if [ -e "$i/scaling_up_block_cycles" ]; then
						cecho "3" $i/scaling_up_block_cycles;
					fi
					if [ -e "$i/scaling_up_block_freq" ]; then
						cecho "1100000" $i/scaling_up_block_freq;
					fi
					if [ -e "$i/smooth_up" ]; then
						cecho "75" $i/smooth_up;
					fi
					if [ -e "$i/smooth_up_sleep" ]; then
						cecho "100" $i/smooth_up_sleep;
					fi
					if [ -e "$i/up_threshold" ]; then
						cecho "80" $i/up_threshold;
					fi
					if [ -e "$i/up_threshold_hotplug1" ]; then
						cecho "35" $i/up_threshold_hotplug1;
					fi
					if [ -e "$i/up_threshold_hotplug2" ]; then
						cecho "65" $i/up_threshold_hotplug2;
					fi
					if [ -e "$i/up_threshold_hotplug3" ]; then
						cecho "85" $i/up_threshold_hotplug3;
					fi
					if [ -e "$i/up_threshold_hotplug_freq1" ]; then
						cecho "0" $i/up_threshold_hotplug_freq1;
					fi
					if [ -e "$i/up_threshold_hotplug_freq2" ]; then
						cecho "0" $i/up_threshold_hotplug_freq2;
					fi
					if [ -e "$i/up_threshold_hotplug_freq3" ]; then
						cecho "0" $i/up_threshold_hotplug_freq3;
					fi
					if [ -e "$i/up_threshold_sleep" ]; then
						cecho "90" $i/up_threshold_sleep;
					fi
				fi
				if [ "$core_ctl" -eq 1 ]; then
				   ga=$((ga+1))
				    if [ "$ga" -eq 4 ]; then
				      echo "Breaking small cluster"
					  break 1
					fi
                fi
			done
		fi
		#For MIDDLE cluster
		if [ "$TC" -eq 3 ]; then
			if [ -d ${gov[$gb]} ]; then
				#TL_0 for only hispeed_freq
				TL_0=$((${IP[1]} * 8))
				TL_1=$(($MIN_FREQ_1 + (${IP[1]} * 2)))
				TL_2=$(($TL_1 + ${CDF[1]} + ${IP[1]}))
				TL_3=$(($TL_2 + ${CDF[1]} + (${CDF[1]} / 2)))
				TL_4=$(($TL_3 + ${CDF[1]}))
				TL_5=$(($TL_4 + ${CDF[1]}))
				TL_6=$(($TL_5 + ${CDF[1]} + (${CDF[1]} / 2)))
				TL_7=$(($TL_6 + (${CDF[1]} * 2)))
				TL_8=$(($TL_7 + (${CDF[1]} * 2)))
				TL_9=$(($TL_8 + (${CDF[1]} * 3)))
				for i in ${gov[$gb]}; do
				if [ "$bL" -eq 1 ]; then
								$busybox echo -e "\e[01;37m Governor MIDDLE core: ${cur_gov[$ga]} \e[00;37m" >> $TUNED
								$busybox echo -e "\e[01;37m Governor MIDDLE core: ${cur_gov[$ga]} \e[00;37m" >> $TWEAKED
				fi
				if [ "$SC" -eq 1 ] || [ "$REG" -eq 1 ]; then
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$ga]} \e[00;37m" >> $TUNED
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$ga]} \e[00;37m" >> $TWEAKED
				fi
					chmod 644 $i/*
					if [ -e "$i/above_hispeed_delay" ]; then
						cecho "20000 700000:0 1100000:50000 1400000:75000 1700000:100000" $i/above_hispeed_delay;
					fi
					if [ -e "$i/boost" ]; then
						cecho "0" $i/boost;
					fi
					if [ -e "$i/boostpulse_duration" ]; then
						cecho "0" $i/boostpulse_duration;
					fi
					if [ -e "$i/go_hispeed_load" ]; then
						if [ "${CDF[1]}" -lt 150000 ] && [ "${CDF[1]}" -gt 110000 ]; then
							cecho "95" $i/go_hispeed_load;
						elif [ "${CDF[1]}" -lt 110000 ] && [ "${CDF[1]}" -gt 0 ]; then
							cecho "90" $i/go_hispeed_load;
						else
							cecho "99" $i/go_hispeed_load;
						fi
					fi
					if [ -e "$i/hispeed_freq" ]; then
							cecho "$((${HSF[1]} + $MIN_FREQ_1))" $i/hispeed_freq;
							$busybox echo "MIDDLE $((${HSF[1]} + $MIN_FREQ_1))"
							$busybox sleep 1
					fi
					if [ -e "$i/max_freq_hysteresis" ]; then
						cecho "0" $i/max_freq_hysteresis;
					fi
					if [ -e "$i/align_windows" ]; then
						cecho "0" $i/align_windows;
					fi
					if [ -e "$i/io_is_busy" ]; then
						cecho "1" $i/io_is_busy;
					fi
					if [ -e "$i/min_sample_time" ]; then
						cecho "50000" $i/min_sample_time;
					fi
					if [ -e "$i/sampling_down_factor" ]; then
						cecho "1" $i/sampling_down_factor;
					fi
					if [ -e "$i/target_loads" ]; then
						cecho "0 $MIN_FREQ_1:15 $TL_1:30 $TL_2:42 $TL_3:55 $TL_4:68 $TL_5:80 $TL_6:87 $TL_7:92 $TL_8:97 $TL_9:99" $i/target_loads;
					fi
					if [ -e "$i/timer_rate" ]; then
						cecho "20000" $i/timer_rate;
					fi
					if [ -e "$i/timer_slack" ]; then
						cecho "0" $i/timer_slack;
					fi
					if [ -e "$i/up_threshold_any_cpu_freq" ]; then
						cecho "0" $i/up_threshold_any_cpu_freq;
					fi
					if [ -e "$i/up_threshold_any_cpu_load" ]; then
						cecho "0" $i/up_threshold_any_cpu_load;
					fi
					if [ -e "$i/down_threshold" ]; then
						cecho "95" $i/down_threshold;
					fi
					if [ -e "$i/freq_step" ]; then
						cecho "7" $i/freq_step;
					fi
					if [ -e "$i/ignore_nice_load" ]; then
						cecho "1" $i/ignore_nice_load;
					fi
					if [ -e "$i/sampling_rate" ] && [[ "${cur_gov[$gb]}" != "conservative" && "${cur_gov[$gb]}" != "lionfish" ]]; then
						cecho "75000" $i/sampling_rate;
					fi
					if [ -e "$i/sampling_rate_min" ] && [[ "${cur_gov[$gb]}" != "conservative" && "${cur_gov[$gb]}" != "ondemand" && "${cur_gov[$gb]}" != "lionfish" ]]; then
						cecho "30000" $i/sampling_rate_min;
					fi
					if [ -e "$i/up_threshold" ]; then
						cecho "98" $i/up_threshold;
					fi
					if [ -e "$i/sync_freq" ]; then
						cecho "0" $i/sync_freq;
					fi
					if [ -e "$i/two_phase_freq" ]; then
						cecho "960000,960000,960000,960000" $i/two_phase_freq;
					fi
					if [ -e "$i/jump_level" ]; then
						cecho "600000" $i/jump_level;
					fi
					if [ -e "$i/jump_threshold" ]; then
						cecho "99" $i/jump_threshold;
					fi
					if [ -e "$i/powersave_bias" ]; then
						cecho "0" $i/powersave_bias;
					fi
					if [ -e "$i/down_differential" ]; then
						cecho "65" $i/down_differential;
					fi
					if [ -e "$i/second_phase_freq" ]; then
						cecho "$MIN_FREQ_1" $i/second_phase_freq;
					fi
					if [ -e "$i/boostfreq" ]; then
						cecho "0" $i/boostfreq;
					fi
					if [ -e "$i/micro_freq_up_threshold" ]; then
						cecho "99" $i/micro_freq_up_threshold;
					fi
					if [ -e "$i/up_threshold_min_freq" ]; then
						cecho "600000" $i/up_threshold_min_freq;
					fi
					if [ -e "$i/ba_lock" ]; then
						cecho "0" $i/ba_lock;
					fi
					if [ -e "$i/down_differential_multi_core" ]; then
						cecho "35" $i/down_differential_multi_core;
					fi
					if [ -e "$i/freq_down_step" ]; then
						cecho "$MIN_FREQ_1" $i/freq_down_step;
					fi
					if [ -e "$i/freq_down_step_barrier" ]; then
						cecho "$MIN_FREQ_1" $i/freq_down_step_barrier;
					fi
					if [ -e "$i/input_event_min_freq" ]; then
						cecho "$MIN_FREQ_1, $MIN_FREQ_1, $MIN_FREQ_1, $MIN_FREQ_1" $i/input_event_min_freq;
					fi
					if [ -e "$i/optimal_freq" ]; then
						cecho "$MIN_FREQ_1" $i/optimal_freq;
					fi
					if [ -e "$i/shortcut" ]; then
						cecho "0" $i/shortcut;
					fi
					if [ -e "$i/up_threshold_multi_core" ]; then
						cecho "0" $i/up_threshold_multi_core;
					fi
					if [ -e "$i/freq_responsiveness" ]; then
						cecho "$MIN_FREQ_1" $i/freq_responsiveness;
					fi
					if [ -e "$i/awake_ideal_freq" ]; then
						cecho "$MIN_FREQ_1" $i/awake_ideal_freq;
					fi
					if [ -e "$i/boost_duration" ]; then
						cecho "0" $i/boost_duration;
					fi
					if [ -e "$i/boost_freq" ]; then
						cecho "$MIN_FREQ_1" $i/boost_freq;
					fi
					if [ -e "$i/debug_mask" ]; then
						cecho "32" $i/debug_mask;
					fi
					if [ -e "$i/down_rate" ]; then
						cecho "10000" $i/down_rate;
					fi
					if [ -e "$i/ignore_nice" ]; then
						cecho "0" $i/ignore_nice;
					fi
					if [ -e "$i/input_boost_duration" ]; then
						cecho "0" $i/input_boost_duration;
					fi
					if [ -e "$i/max_cpu_load" ]; then
						cecho "100" $i/max_cpu_load;
					fi
					if [ -e "$i/min_cpu_load" ]; then
						cecho "5" $i/min_cpu_load;
					fi
					if [ -e "$i/min_sampling_rate" ]; then
						cecho "20000" $i/min_sampling_rate;
					fi
					if [ -e "$i/ramp_down_step" ]; then
						cecho "150000" $i/ramp_down_step;
					fi
					if [ -e "$i/ramp_up_during_boost" ]; then
						cecho "0" $i/ramp_up_during_boost;
					fi
					if [ -e "$i/ramp_up_step" ]; then
						cecho "100000" $i/ramp_up_step;
					fi
					if [ -e "$i/suspend_ideal_freq" ]; then
						cecho "$MIN_FREQ_1" $i/suspend_ideal_freq;
					fi
					if [ -e "$i/touch_poke_freq" ]; then
						cecho "0" $i/touch_poke_freq;
					fi
					if [ -e "$i/up_rate" ]; then
						cecho "0" $i/up_rate;
					fi
					if [ -e "$i/optimal_max_freq" ]; then
						cecho "0" $i/optimal_max_freq;
					fi
					if [ -e "$i/freq_calc_thresh" ]; then
						cecho "$MIN_FREQ_1" $i/freq_calc_thresh;
					fi
					if [ -e "$i/allowed_misses" ]; then
						cecho "5" $i/allowed_misses;
					fi
					if [ -e "$i/target_residency" ]; then
						cecho "10000" $i/target_residency;
					fi
					if [ -e "$i/inter_hifreq" ]; then
						cecho "1100000" $i/inter_hifreq;
					fi
					if [ -e "$i/inter_lofreq" ]; then
						cecho "$MIN_FREQ_1" $i/inter_lofreq;
					fi
					if [ -e "$i/inter_staycycles" ]; then
						cecho "2" $i/inter_staycycles;
					fi
					if [ -e "$i/staycycles_resetfreq" ]; then
						cecho "$MIN_FREQ_1" $i/staycycles_resetfreq;
					fi
					if [ -e "$i/input_boost_duration" ]; then
						cecho "0" $i/input_boost_duration;
					fi
					if [ -e "$i/sampling_easy_factor" ]; then
						cecho "2" $i/sampling_easy_factor;
					fi
					if [ -e "$i/sampling_interim_factor" ]; then
						cecho "3" $i/sampling_interim_factor;
					fi
					if [ -e "$i/ui_sampling_rate" ]; then
						cecho "40000" $i/ui_sampling_rate;
					fi
					if [ -e "$i/ui_timeout" ]; then
						cecho "40" $i/ui_timeout;
					fi
					if [ -e "$i/down_sample_time" ]; then
						cecho "10000" $i/down_sample_time;
					fi
					if [ -e "$i/up_sample_time" ]; then
						cecho "50000" $i/up_sample_time;
					fi
					if [ -e "$i/active_floor_freq" ]; then
						cecho "$MIN_FREQ_1" $i/active_floor_freq;
					fi
					if [ -e "$i/powersave" ]; then
						cecho "1" $i/powersave;
					fi
					if [ -e "$i/fastlane" ]; then
						cecho "0" $i/fastlane;
					fi
					if [ -e "$i/input_boost_freq" ]; then
						cecho "600000" $i/input_boost_freq;
					fi
					if [ -e "$i/low_load_down_threshold" ]; then
						cecho "37" $i/low_load_down_threshold;
					fi
					if [ "${cur_gov[$gb]}" = "zzmoove" ]; then
						if [ -s $i/profile_number ]; then
							pn=$($busybox cat $i/profile_number)
							if [ "$pn" -ne 0 ]; then
								cecho "0" $i/profile_number;
							fi
						fi
						if [ -e "$i/afs_threshold1" ]; then
							cecho "20" $i/afs_threshold1;
						fi
						if [ -e "$i/afs_threshold2" ]; then
							cecho "30" $i/afs_threshold2;
						fi
						if [ -e "$i/afs_threshold3" ]; then
							cecho "70" $i/afs_threshold3;
						fi
						if [ -e "$i/afs_threshold4" ]; then
							cecho "90" $i/afs_threshold4;
						fi
						if [ -e "$i/auto_adjust_freq_threshold" ]; then
							cecho "0" $i/auto_adjust_freq_threshold;
						fi
						if [ -e "$i/block_down_multiplier_hotplug1" ]; then
							cecho "1" $i/block_down_multiplier_hotplug1;
						fi
						if [ -e "$i/block_down_multiplier_hotplug2" ]; then
							cecho "1" $i/block_down_multiplier_hotplug2;
						fi
						if [ -e "$i/block_down_multiplier_hotplug3" ]; then
							cecho "1" $i/block_down_multiplier_hotplug3;
						fi
						if [ -e "$i/block_down_multiplier_hotplug4" ]; then
							cecho "1" $i/block_down_multiplier_hotplug4;
						fi
						if [ -e "$i/down_threshold" ]; then
							cecho "65" $i/down_threshold;
						fi
						if [ -e "$i/down_threshold_hotplug1" ]; then
							cecho "45" $i/down_threshold_hotplug1;
						fi
						if [ -e "$i/down_threshold_hotplug2" ]; then
							cecho "60" $i/down_threshold_hotplug2;
						fi
						if [ -e "$i/down_threshold_hotplug3" ]; then
							cecho "80" $i/down_threshold_hotplug3;
						fi
						if [ -e "$i/down_threshold_sleep" ]; then
							cecho "95" $i/down_threshold_sleep;
						fi
						if [ -e "$i/early_demand" ]; then
							cecho "0" $i/early_demand;
						fi
						if [ -e "$i/early_demand_sleep" ]; then
							cecho "0" $i/early_demand_sleep;
						fi
						if [ -e "$i/fast_scaling_down" ]; then
							cecho "4" $i/fast_scaling_down;
						fi
						if [ -e "$i/fast_scaling_down_sleep" ]; then
							cecho "6" $i/fast_scaling_down_sleep;
						fi
						if [ -e "$i/fast_scaling_up_sleep" ]; then
							cecho "0" $i/fast_scaling_up_sleep;
						fi
						if [ -e "$i/fast_scaling_up" ]; then
							cecho "0" $i/fast_scaling_up;
						fi
						if [ -e "$i/freq_limit" ]; then
							cecho "0" $i/freq_limit;
						fi
						if [ -e "$i/freq_limit_sleep" ]; then
							cecho "900000" $i/freq_limit_sleep;
						fi
						if [ -e "$i/grad_up_threshold" ]; then
							cecho "50" $i/grad_up_threshold;
						fi
						if [ -e "$i/grad_up_threshold_sleep" ]; then
							cecho "80" $i/grad_up_threshold_sleep;
						fi
						if [ -e "$i/hotplug_block_down_cycles" ]; then
							cecho "0" $i/hotplug_block_down_cycles;
						fi
						if [ -e "$i/hotplug_block_up_cycles" ]; then
							cecho "0" $i/hotplug_block_up_cycles;
						fi
						if [ -e "$i/hotplug_engage_freq" ]; then
							cecho "0" $i/hotplug_engage_freq;
						fi
						if [ -e "$i/hotplug_idle_freq" ]; then
							cecho "0" $i/hotplug_idle_freq;
						fi
						if [ -e "$i/hotplug_idle_threshold" ]; then
							cecho "0" $i/hotplug_idle_threshold;
						fi
						if [ -e "$i/hotplug_lock" ]; then
							cecho "0" $i/hotplug_lock;
						fi
						if [ -e "$i/hotplug_max_limit" ]; then
							cecho "0" $i/hotplug_max_limit;
						fi
						if [ -e "$i/hotplug_min_limit" ]; then
							cecho "0" $i/hotplug_min_limit;
						fi
						if [ -e "$i/hotplug_sleep" ]; then
							cecho "0" $i/hotplug_sleep;
						fi
						if [ -e "$i/hotplug_stagger_down" ]; then
							cecho "0" $i/hotplug_stagger_down;
						fi
						if [ -e "$i/hotplug_stagger_up" ]; then
							cecho "0" $i/hotplug_stagger_up;
						fi
						if [ -e "$i/ignore_nice_load" ]; then
							cecho "0" $i/ignore_nice_load;
						fi
						if [ -e "$i/inputboost_cycles" ]; then
							cecho "0" $i/inputboost_cycles;
						fi
						if [ -e "$i/inputboost_punch_cycles" ]; then
							cecho "0" $i/inputboost_punch_cycles;
						fi
						if [ -e "$i/inputboost_punch_freq" ]; then
							cecho "0" $i/inputboost_punch_freq;
						fi
						if [ -e "$i/inputboost_punch_on_epenmove" ]; then
							cecho "0" $i/inputboost_punch_on_epenmove;
						fi
						if [ -e "$i/inputboost_punch_on_fingerdown" ]; then
							cecho "0" $i/inputboost_punch_on_fingerdown;
						fi
						if [ -e "$i/inputboost_punch_on_fingermove" ]; then
							cecho "0" $i/inputboost_punch_on_fingermove;
						fi
						if [ -e "$i/inputboost_typingbooster_cores" ]; then
							cecho "0" $i/inputboost_typingbooster_cores;
						fi
						if [ -e "$i/inputboost_typingbooster_up_threshold" ]; then
							cecho "60" $i/inputboost_typingbooster_up_threshold;
						fi
						if [ -e "$i/inputboost_up_threshold" ]; then
							cecho "100" $i/inputboost_up_threshold;
						fi
						if [ -e "$i/music_max_freq" ]; then
							cecho "600000" $i/music_max_freq;
						fi
						if [ -e "$i/music_min_cores" ]; then
							cecho "0" $i/music_min_cores;
						fi
						if [ -e "$i/music_min_freq" ]; then
							cecho "$MIN_FREQ_0" $i/music_min_freq;
						fi
						if [ -e "$i/sampling_down_factor" ]; then
							cecho "1" $i/sampling_down_factor;
						fi
						if [ -e "$i/sampling_down_max_momentum" ]; then
							cecho "0" $i/sampling_down_max_momentum;
						fi
						if [ -e "$i/sampling_down_max_sensitivity" ]; then
							cecho "75" $i/sampling_down_max_sensitivity;
						fi
						if [ -e "$i/sampling_rate" ]; then
							cecho "100000" $i/sampling_rate;
						fi
						if [ -e "$i/sampling_rate_idle" ]; then
							cecho "100000" $i/sampling_rate_idle;
						fi
						if [ -e "$i/sampling_rate_idle_delay" ]; then
							cecho "0" $i/sampling_rate_idle_delay;
						fi
						if [ -e "$i/sampling_rate_idle_threshold" ]; then
							cecho "50" $i/sampling_rate_idle_threshold;
						fi
						if [ -e "$i/sampling_rate_sleep_multiplier" ]; then
							cecho "2" $i/sampling_rate_sleep_multiplier;
						fi
						if [ -e "$i/scaling_block_cycles" ]; then
							cecho "0" $i/scaling_block_cycles;
						fi
						if [ -e "$i/scaling_block_force_down" ]; then
							cecho "0" $i/scaling_block_force_down;
						fi
						if [ -e "$i/scaling_block_freq" ]; then
							cecho "0" $i/scaling_block_freq;
						fi
						if [ -e "$i/scaling_block_threshold" ]; then
							cecho "0" $i/scaling_block_threshold;
						fi
						if [ -e "$i/scaling_fastdown_down_threshold" ]; then
							cecho "0" $i/scaling_fastdown_down_threshold;
						fi
						if [ -e "$i/scaling_fastdown_freq" ]; then
							cecho "0" $i/scaling_fastdown_freq;
						fi
						if [ -e "$i/scaling_fastdown_up_threshold" ]; then
							cecho "0" $i/scaling_fastdown_up_threshold;
						fi
						if [ -e "$i/scaling_proportional" ]; then
							cecho "0" $i/scaling_proportional;
						fi
						if [ -e "$i/scaling_responsiveness_freq" ]; then
							cecho "0" $i/scaling_responsiveness_freq;
						fi
						if [ -e "$i/scaling_responsiveness_up_threshold" ]; then
							cecho "90" $i/scaling_responsiveness_up_threshold;
						fi
						if [ -e "$i/scaling_up_block_cycles" ]; then
							cecho "3" $i/scaling_up_block_cycles;
						fi
						if [ -e "$i/scaling_up_block_freq" ]; then
							cecho "1100000" $i/scaling_up_block_freq;
						fi
						if [ -e "$i/smooth_up" ]; then
							cecho "75" $i/smooth_up;
						fi
						if [ -e "$i/smooth_up_sleep" ]; then
							cecho "100" $i/smooth_up_sleep;
						fi
						if [ -e "$i/up_threshold" ]; then
							cecho "80" $i/up_threshold;
						fi
						if [ -e "$i/up_threshold_hotplug1" ]; then
							cecho "35" $i/up_threshold_hotplug1;
						fi
						if [ -e "$i/up_threshold_hotplug2" ]; then
							cecho "65" $i/up_threshold_hotplug2;
						fi
						if [ -e "$i/up_threshold_hotplug3" ]; then
							cecho "85" $i/up_threshold_hotplug3;
						fi
						if [ -e "$i/up_threshold_hotplug_freq1" ]; then
							cecho "0" $i/up_threshold_hotplug_freq1;
						fi
						if [ -e "$i/up_threshold_hotplug_freq2" ]; then
							cecho "0" $i/up_threshold_hotplug_freq2;
						fi
						if [ -e "$i/up_threshold_hotplug_freq3" ]; then
							cecho "0" $i/up_threshold_hotplug_freq3;
						fi
						if [ -e "$i/up_threshold_sleep" ]; then
							cecho "90" $i/up_threshold_sleep;
						fi
					fi
				done
			fi
		fi
		#For BIG and dual cluster
		#For BIG and dual cluster
		if [ "$DC" -eq 1 ] || [ "$TC" -eq 1 ] || [ "$core_ctl" -eq 1 ]; then
			if [ -d ${gov[$gc]} ] || [ "$core_ctl" -eq 1 ]; then
				TL_0=$((${IP[2]} * 10))
				TL_1=$(($MIN_FREQ_2 + (${IP[2]} * 2)))
				TL_2=$(($TL_1 + ${CDF[2]} + ${IP[2]}))
				TL_3=$(($TL_2 + ${CDF[2]} + (${CDF[2]} / 2)))
				TL_4=$(($TL_3 + ${CDF[2]}))
				TL_5=$(($TL_4 + ${CDF[2]}))
				TL_6=$(($TL_5 + ${CDF[2]} + (${CDF[2]} / 2)))
				TL_7=$(($TL_6 + (${CDF[2]} * 2)))
				TL_8=$(($TL_7 + (${CDF[2]} * 2)))
				TL_9=$(($TL_8 + (${CDF[2]} * 3)))
				for i in ${gov[$gc]}; do
				if [ "$bL" -eq 1 ]; then
								$busybox echo -e "\e[01;37m Governor BIG core: ${cur_gov[$ga]} \e[00;37m" >> $TUNED
								$busybox echo -e "\e[01;37m Governor BIG core: ${cur_gov[$ga]} \e[00;37m" >> $TWEAKED
				fi
				if [ "$SC" -eq 1 ] || [ "$REG" -eq 1 ]; then
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$gc]} \e[00;37m" >> $TUNED
				   $busybox echo -e "\e[01;37m Governor: ${cur_gov[$gc]} \e[00;37m" >> $TWEAKED
				fi
					chmod 644 $i/*
					if [ -e "$i/above_hispeed_delay" ]; then
						cecho "20000 700000:0 1100000:50000 1400000:75000 1700000:100000" $i/above_hispeed_delay;
					fi
					if [ -e "$i/boost" ]; then
						cecho "0" $i/boost;
					fi
					if [ -e "$i/boostpulse_duration" ]; then
						cecho "0" $i/boostpulse_duration;
					fi
					if [ -e "$i/go_hispeed_load" ]; then
						if [ "${CDF[2]}" -lt 150000 ] && [ "${CDF[2]}" -gt 110000 ]; then
							cecho "95" $i/go_hispeed_load;
						elif [ "${CDF[2]}" -lt 110000 ] && [ "${CDF[2]}" -gt 0 ]; then
							cecho "90" $i/go_hispeed_load;
						else
							cecho "99" $i/go_hispeed_load;
						fi
					fi
					if [ -e "$i/hispeed_freq" ]; then
							cecho "$((${HSF[2]} + $MIN_FREQ_2))" $i/hispeed_freq;
							$busybox echo "BIG $((${HSF[2]} + $MIN_FREQ_2))"
							$busybox sleep 1
					fi
					if [ -e "$i/max_freq_hysteresis" ]; then
						cecho "0" $i/max_freq_hysteresis;
					fi
					if [ -e "$i/align_windows" ]; then
						cecho "0" $i/align_windows;
					fi
					if [ -e "$i/io_is_busy" ]; then
						cecho "1" $i/io_is_busy;
					fi
					if [ -e "$i/min_sample_time" ]; then
						cecho "50000" $i/min_sample_time;
					fi
					if [ -e "$i/sampling_down_factor" ]; then
						cecho "1" $i/sampling_down_factor;
					fi
					if [ -e "$i/target_loads" ]; then
						cecho "0 $MIN_FREQ_2:15 $TL_1:30 $TL_2:42 $TL_3:55 $TL_4:68 $TL_5:80 $TL_6:87 $TL_7:92 $TL_8:97" $i/target_loads;
					fi
					if [ -e "$i/timer_rate" ]; then
						cecho "20000" $i/timer_rate;
					fi
					if [ -e "$i/timer_slack" ]; then
						cecho "0" $i/timer_slack;
					fi
					if [ -e "$i/up_threshold_any_cpu_freq" ]; then
						cecho "0" $i/up_threshold_any_cpu_freq;
					fi
					if [ -e "$i/up_threshold_any_cpu_load" ]; then
						cecho "0" $i/up_threshold_any_cpu_load;
					fi
					if [ -e "$i/down_threshold" ]; then
						cecho "95" $i/down_threshold;
					fi
					if [ -e "$i/freq_step" ]; then
						cecho "7" $i/freq_step;
					fi
					if [ -e "$i/ignore_nice_load" ]; then
						cecho "1" $i/ignore_nice_load;
					fi
					if [ -e "$i/sampling_rate" ] && [[ "${cur_gov[$gc]}" != "conservative" && "${cur_gov[$gc]}" != "lionfish" ]]; then
						cecho "75000" $i/sampling_rate;
					fi
					if [ -e "$i/sampling_rate_min" ] && [[ "${cur_gov[$gc]}" != "conservative" && "${cur_gov[$gc]}" != "ondemand" && "${cur_gov[$gc]}" != "lionfish" ]]; then
						cecho "30000" $i/sampling_rate_min;
					fi
					if [ -e "$i/up_threshold" ]; then
						cecho "98" $i/up_threshold;
					fi
					if [ -e "$i/sync_freq" ]; then
						cecho "$MIN_FREQ_2" $i/sync_freq;
					fi
					if [ -e "$i/two_phase_freq" ]; then
						cecho "960000,960000,960000,960000" $i/two_phase_freq;
					fi
					if [ -e "$i/jump_level" ]; then
						cecho "600000" $i/jump_level;
					fi
					if [ -e "$i/jump_threshold" ]; then
						cecho "99" $i/jump_threshold;
					fi
					if [ -e "$i/powersave_bias" ]; then
						cecho "0" $i/powersave_bias;
					fi
					if [ -e "$i/down_differential" ]; then
						cecho "65" $i/down_differential;
					fi
					if [ -e "$i/second_phase_freq" ]; then
						cecho "$MIN_FREQ_2" $i/second_phase_freq;
					fi
					if [ -e "$i/boostfreq" ]; then
						cecho "0" $i/boostfreq;
					fi
					if [ -e "$i/micro_freq_up_threshold" ]; then
						cecho "99" $i/micro_freq_up_threshold;
					fi
					if [ -e "$i/up_threshold_min_freq" ]; then
						cecho "600000" $i/up_threshold_min_freq;
					fi
					if [ -e "$i/ba_lock" ]; then
						cecho "0" $i/ba_lock;
					fi
					if [ -e "$i/down_differential_multi_core" ]; then
						cecho "35" $i/down_differential_multi_core;
					fi
					if [ -e "$i/freq_down_step" ]; then
						cecho "$MIN_FREQ_2" $i/freq_down_step;
					fi
					if [ -e "$i/freq_down_step_barrier" ]; then
						cecho "$MIN_FREQ_2" $i/freq_down_step_barrier;
					fi
					if [ -e "$i/input_event_min_freq" ]; then
						cecho "$MIN_FREQ_2, $MIN_FREQ_2, $MIN_FREQ_2, $MIN_FREQ_2" $i/input_event_min_freq;
					fi
					if [ -e "$i/optimal_freq" ]; then
						cecho "$MIN_FREQ_2" $i/optimal_freq;
					fi
					if [ -e "$i/shortcut" ]; then
						cecho "0" $i/shortcut;
					fi
					if [ -e "$i/up_threshold_multi_core" ]; then
						cecho "0" $i/up_threshold_multi_core;
					fi
					if [ -e "$i/freq_responsiveness" ]; then
						cecho "$MIN_FREQ_2" $i/freq_responsiveness;
					fi
					if [ -e "$i/awake_ideal_freq" ]; then
						cecho "$MIN_FREQ_2" $i/awake_ideal_freq;
					fi
					if [ -e "$i/boost_duration" ]; then
						cecho "0" $i/boost_duration;
					fi
					if [ -e "$i/boost_freq" ]; then
						cecho "$MIN_FREQ_2" $i/boost_freq;
					fi
					if [ -e "$i/debug_mask" ]; then
						cecho "32" $i/debug_mask;
					fi
					if [ -e "$i/down_rate" ]; then
						cecho "10000" $i/down_rate;
					fi
					if [ -e "$i/ignore_nice" ]; then
						cecho "0" $i/ignore_nice;
					fi
					if [ -e "$i/input_boost_duration" ]; then
						cecho "0" $i/input_boost_duration;
					fi
					if [ -e "$i/max_cpu_load" ]; then
						cecho "100" $i/max_cpu_load;
					fi
					if [ -e "$i/min_cpu_load" ]; then
						cecho "5" $i/min_cpu_load;
					fi
					if [ -e "$i/min_sampling_rate" ]; then
						cecho "20000" $i/min_sampling_rate;
					fi
					if [ -e "$i/ramp_down_step" ]; then
						cecho "150000" $i/ramp_down_step;
					fi
					if [ -e "$i/ramp_up_during_boost" ]; then
						cecho "0" $i/ramp_up_during_boost;
					fi
					if [ -e "$i/ramp_up_step" ]; then
						cecho "100000" $i/ramp_up_step;
					fi
					if [ -e "$i/suspend_ideal_freq" ]; then
						cecho "$MIN_FREQ_2" $i/suspend_ideal_freq;
					fi
					if [ -e "$i/touch_poke_freq" ]; then
						cecho "0" $i/touch_poke_freq;
					fi
					if [ -e "$i/up_rate" ]; then
						cecho "0" $i/up_rate;
					fi
					if [ -e "$i/optimal_max_freq" ]; then
						cecho "0" $i/optimal_max_freq;
					fi
					if [ -e "$i/freq_calc_thresh" ]; then
						cecho "$MIN_FREQ_2" $i/freq_calc_thresh;
					fi
					if [ -e "$i/allowed_misses" ]; then
						cecho "5" $i/allowed_misses;
					fi
					if [ -e "$i/target_residency" ]; then
						cecho "10000" $i/target_residency;
					fi
					if [ -e "$i/inter_hifreq" ]; then
						cecho "1100000" $i/inter_hifreq;
					fi
					if [ -e "$i/inter_lofreq" ]; then
						cecho "$MIN_FREQ_2" $i/inter_lofreq;
					fi
					if [ -e "$i/inter_staycycles" ]; then
						cecho "2" $i/inter_staycycles;
					fi
					if [ -e "$i/staycycles_resetfreq" ]; then
						cecho "$MIN_FREQ_2" $i/staycycles_resetfreq;
					fi
					if [ -e "$i/input_boost_duration" ]; then
						cecho "0" $i/input_boost_duration;
					fi
					if [ -e "$i/sampling_easy_factor" ]; then
						cecho "2" $i/sampling_easy_factor;
					fi
					if [ -e "$i/sampling_interim_factor" ]; then
						cecho "3" $i/sampling_interim_factor;
					fi
					if [ -e "$i/ui_sampling_rate" ]; then
						cecho "40000" $i/ui_sampling_rate;
					fi
					if [ -e "$i/ui_timeout" ]; then
						cecho "40" $i/ui_timeout;
					fi
					if [ -e "$i/down_sample_time" ]; then
						cecho "10000" $i/down_sample_time;
					fi
					if [ -e "$i/up_sample_time" ]; then
						cecho "50000" $i/up_sample_time;
					fi
					if [ -e "$i/active_floor_freq" ]; then
						cecho "$MIN_FREQ_2" $i/active_floor_freq;
					fi
					if [ -e "$i/powersave" ]; then
						cecho "1" $i/powersave;
					fi
					if [ -e "$i/fastlane" ]; then
						cecho "0" $i/fastlane;
					fi
					if [ -e "$i/input_boost_freq" ]; then
						cecho "600000" $i/input_boost_freq;
					fi
					if [ -e "$i/low_load_down_threshold" ]; then
						cecho "37" $i/low_load_down_threshold;
					fi
					if [ "${cur_gov[$gc]}" = "zzmoove" ]; then
						if [ -s $i/profile_number ]; then
							pn=$($busybox cat $i/profile_number)
							if [ "$pn" -ne 0 ]; then
								$busybox echo "0" $i/profile_number;
							fi
						fi
						if [ -e "$i/afs_threshold1" ]; then
							cecho "20" $i/afs_threshold1;
						fi
						if [ -e "$i/afs_threshold2" ]; then
							cecho "30" $i/afs_threshold2;
						fi
						if [ -e "$i/afs_threshold3" ]; then
							cecho "70" $i/afs_threshold3;
						fi
						if [ -e "$i/afs_threshold4" ]; then
							cecho "90" $i/afs_threshold4;
						fi
						if [ -e "$i/auto_adjust_freq_threshold" ]; then
							cecho "0" $i/auto_adjust_freq_threshold;
						fi
						if [ -e "$i/block_down_multiplier_hotplug1" ]; then
							cecho "1" $i/block_down_multiplier_hotplug1;
						fi
						if [ -e "$i/block_down_multiplier_hotplug2" ]; then
							cecho "1" $i/block_down_multiplier_hotplug2;
						fi
						if [ -e "$i/block_down_multiplier_hotplug3" ]; then
							cecho "1" $i/block_down_multiplier_hotplug3;
						fi
						if [ -e "$i/block_down_multiplier_hotplug4" ]; then
							cecho "1" $i/block_down_multiplier_hotplug4;
						fi
						if [ -e "$i/down_threshold" ]; then
							cecho "65" $i/down_threshold;
						fi
						if [ -e "$i/down_threshold_hotplug1" ]; then
							cecho "45" $i/down_threshold_hotplug1;
						fi
						if [ -e "$i/down_threshold_hotplug2" ]; then
							cecho "60" $i/down_threshold_hotplug2;
						fi
						if [ -e "$i/down_threshold_hotplug3" ]; then
							cecho "80" $i/down_threshold_hotplug3;
						fi
						if [ -e "$i/down_threshold_sleep" ]; then
							cecho "95" $i/down_threshold_sleep;
						fi
						if [ -e "$i/early_demand" ]; then
							cecho "0" $i/early_demand;
						fi
						if [ -e "$i/early_demand_sleep" ]; then
							cecho "0" $i/early_demand_sleep;
						fi
						if [ -e "$i/fast_scaling_down" ]; then
							cecho "4" $i/fast_scaling_down;
						fi
						if [ -e "$i/fast_scaling_down_sleep" ]; then
							cecho "6" $i/fast_scaling_down_sleep;
						fi
						if [ -e "$i/fast_scaling_up_sleep" ]; then
							cecho "0" $i/fast_scaling_up_sleep;
						fi
						if [ -e "$i/fast_scaling_up" ]; then
							cecho "0" $i/fast_scaling_up;
						fi
						if [ -e "$i/freq_limit" ]; then
							cecho "0" $i/freq_limit;
						fi
						if [ -e "$i/freq_limit_sleep" ]; then
							cecho "900000" $i/freq_limit_sleep;
						fi
						if [ -e "$i/grad_up_threshold" ]; then
							cecho "50" $i/grad_up_threshold;
						fi
						if [ -e "$i/grad_up_threshold_sleep" ]; then
							cecho "80" $i/grad_up_threshold_sleep;
						fi
						if [ -e "$i/hotplug_block_down_cycles" ]; then
							cecho "0" $i/hotplug_block_down_cycles;
						fi
						if [ -e "$i/hotplug_block_up_cycles" ]; then
							cecho "0" $i/hotplug_block_up_cycles;
						fi
						if [ -e "$i/hotplug_engage_freq" ]; then
							cecho "0" $i/hotplug_engage_freq;
						fi
						if [ -e "$i/hotplug_idle_freq" ]; then
							cecho "0" $i/hotplug_idle_freq;
						fi
						if [ -e "$i/hotplug_idle_threshold" ]; then
							cecho "0" $i/hotplug_idle_threshold;
						fi
						if [ -e "$i/hotplug_lock" ]; then
							cecho "0" $i/hotplug_lock;
						fi
						if [ -e "$i/hotplug_max_limit" ]; then
							cecho "0" $i/hotplug_max_limit;
						fi
						if [ -e "$i/hotplug_min_limit" ]; then
							cecho "0" $i/hotplug_min_limit;
						fi
						if [ -e "$i/hotplug_sleep" ]; then
							cecho "0" $i/hotplug_sleep;
						fi
						if [ -e "$i/hotplug_stagger_down" ]; then
							cecho "0" $i/hotplug_stagger_down;
						fi
						if [ -e "$i/hotplug_stagger_up" ]; then
							cecho "0" $i/hotplug_stagger_up;
						fi
						if [ -e "$i/ignore_nice_load" ]; then
							cecho "0" $i/ignore_nice_load;
						fi
						if [ -e "$i/inputboost_cycles" ]; then
							cecho "0" $i/inputboost_cycles;
						fi
						if [ -e "$i/inputboost_punch_cycles" ]; then
							cecho "0" $i/inputboost_punch_cycles;
						fi
						if [ -e "$i/inputboost_punch_freq" ]; then
							cecho "0" $i/inputboost_punch_freq;
						fi
						if [ -e "$i/inputboost_punch_on_epenmove" ]; then
							cecho "0" $i/inputboost_punch_on_epenmove;
						fi
						if [ -e "$i/inputboost_punch_on_fingerdown" ]; then
							cecho "0" $i/inputboost_punch_on_fingerdown;
						fi
						if [ -e "$i/inputboost_punch_on_fingermove" ]; then
							cecho "0" $i/inputboost_punch_on_fingermove;
						fi
						if [ -e "$i/inputboost_typingbooster_cores" ]; then
							cecho "0" $i/inputboost_typingbooster_cores;
						fi
						if [ -e "$i/inputboost_typingbooster_up_threshold" ]; then
							cecho "60" $i/inputboost_typingbooster_up_threshold;
						fi
						if [ -e "$i/inputboost_up_threshold" ]; then
							cecho "100" $i/inputboost_up_threshold;
						fi
						if [ -e "$i/music_max_freq" ]; then
							cecho "600000" $i/music_max_freq;
						fi
						if [ -e "$i/music_min_cores" ]; then
							cecho "0" $i/music_min_cores;
						fi
						if [ -e "$i/music_min_freq" ]; then
							cecho "$MIN_FREQ_2" $i/music_min_freq;
						fi
						if [ -e "$i/sampling_down_factor" ]; then
							cecho "1" $i/sampling_down_factor;
						fi
						if [ -e "$i/sampling_down_max_momentum" ]; then
							cecho "0" $i/sampling_down_max_momentum;
						fi
						if [ -e "$i/sampling_down_max_sensitivity" ]; then
							cecho "75" $i/sampling_down_max_sensitivity;
						fi
						if [ -e "$i/sampling_rate" ]; then
							cecho "100000" $i/sampling_rate;
						fi
						if [ -e "$i/sampling_rate_idle" ]; then
							cecho "100000" $i/sampling_rate_idle;
						fi
						if [ -e "$i/sampling_rate_idle_delay" ]; then
							cecho "0" $i/sampling_rate_idle_delay;
						fi
						if [ -e "$i/sampling_rate_idle_threshold" ]; then
							cecho "50" $i/sampling_rate_idle_threshold;
						fi
						if [ -e "$i/sampling_rate_sleep_multiplier" ]; then
							cecho "2" $i/sampling_rate_sleep_multiplier;
						fi
						if [ -e "$i/scaling_block_cycles" ]; then
							cecho "0" $i/scaling_block_cycles;
						fi
						if [ -e "$i/scaling_block_force_down" ]; then
							cecho "0" $i/scaling_block_force_down;
						fi
						if [ -e "$i/scaling_block_freq" ]; then
							cecho "0" $i/scaling_block_freq;
						fi
						if [ -e "$i/scaling_block_threshold" ]; then
							cecho "0" $i/scaling_block_threshold;
						fi
						if [ -e "$i/scaling_fastdown_down_threshold" ]; then
							cecho "0" $i/scaling_fastdown_down_threshold;
						fi
						if [ -e "$i/scaling_fastdown_freq" ]; then
							cecho "0" $i/scaling_fastdown_freq;
						fi
						if [ -e "$i/scaling_fastdown_up_threshold" ]; then
							cecho "0" $i/scaling_fastdown_up_threshold;
						fi
						if [ -e "$i/scaling_proportional" ]; then
							cecho "0" $i/scaling_proportional;
						fi
						if [ -e "$i/scaling_responsiveness_freq" ]; then
							cecho "0" $i/scaling_responsiveness_freq;
						fi
						if [ -e "$i/scaling_responsiveness_up_threshold" ]; then
							cecho "90" $i/scaling_responsiveness_up_threshold;
						fi
						if [ -e "$i/scaling_up_block_cycles" ]; then
							cecho "3" $i/scaling_up_block_cycles;
						fi
						if [ -e "$i/scaling_up_block_freq" ]; then
							cecho "1100000" $i/scaling_up_block_freq;
						fi
						if [ -e "$i/smooth_up" ]; then
							cecho "75" $i/smooth_up;
						fi
						if [ -e "$i/smooth_up_sleep" ]; then
							cecho "100" $i/smooth_up_sleep;
						fi
						if [ -e "$i/up_threshold" ]; then
							cecho "80" $i/up_threshold;
						fi
						if [ -e "$i/up_threshold_hotplug1" ]; then
							cecho "35" $i/up_threshold_hotplug1;
						fi
						if [ -e "$i/up_threshold_hotplug2" ]; then
							cecho "65" $i/up_threshold_hotplug2;
						fi
						if [ -e "$i/up_threshold_hotplug3" ]; then
							cecho "85" $i/up_threshold_hotplug3;
						fi
						if [ -e "$i/up_threshold_hotplug_freq1" ]; then
							cecho "0" $i/up_threshold_hotplug_freq1;
						fi
						if [ -e "$i/up_threshold_hotplug_freq2" ]; then
							cecho "0" $i/up_threshold_hotplug_freq2;
						fi
						if [ -e "$i/up_threshold_hotplug_freq3" ]; then
							cecho "0" $i/up_threshold_hotplug_freq3;
						fi
						if [ -e "$i/up_threshold_sleep" ]; then
							cecho "90" $i/up_threshold_sleep;
						fi
					fi
					if [ "$core_ctl" -eq 1 ]; then
				       gc=$((gc+1))
				        if [ "$gc" -eq $CORE ]; then
				          echo "Breaking big cluster"
						  break 1
					    fi
                    fi
				done
			fi
		fi
		if [ -e "/data/system/tuned" ]; then
			if [ "$bL" -eq 1 ]; then
				if [ "$TC" -eq 1 ]; then
					#For triple cluster
						$busybox echo "Battery ${cur_gov[$ga]} tweaks applied.";
						$busybox echo "Battery ${cur_gov[$gb]} tweaks applied.";
						$busybox echo "Battery ${cur_gov[$gc]} tweaks applied.";
				fi
				if [ "$DC" -eq 1 ]; then
					#For dual cluster
					$busybox echo "Battery ${cur_gov[$ga]} tweaks applied.";
					$busybox echo "Battery ${cur_gov[$gc]} tweaks applied.";
				fi
			fi
			if [ "$SC" -eq 1 ] || [ "$REG" -eq 1 ]; then
				$busybox echo "Battery ${cur_gov[$ga]} tweaks applied.";
			fi
		else
			$busybox echo "Governor Tunables not compatible";
			$busybox echo "${cur_gov[$ga]} Tunables not compatible" > $TUNED
			$busybox echo "${cur_gov[$ga]} Tunables not compatible" > $TWEAKED
		fi
		$busybox echo "";
		if [ -f $INTERVAL ] && [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -ne 0 ]]; then
			sleep $(cat $INTERVAL);
		elif [ -f $INTERVAL ] && [ $(cat $INTERVAL) -eq 0 ]; then
			break
		else
			sleep 180;
		fi
	fi
done
